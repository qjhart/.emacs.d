#+TITLE: Emacs configuration

This example was copied from https://github.com/hrs/dotfiles. Which is pretty
terrific. I also got inspiration from https://github.com/gjstein/emacs.d.

Some other examples I've looked at, include [[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]], and [[https://github.com/jkitchin/scimax][SciMax]]

This is my emacs configuration file, it's the strategy from the [[https://github.com/hrs/dotfiles][dotfiles repo]]
and I used that as my template.

* Configure =use-package=

I use =use-package= to install and configure my packages. My =init.el= includes
the initial setup for =package.el= and ensures that =use-package= is installed,
since I wanna do that right away.

This makes sure that =use-package= will install the package if it's not already
available. It also means that I should be able to open Emacs for the first time
on a fresh Debian box and have my whole environment automatically installed. I'm
not /totally/ sure about that, but we're gettin' close.

#+begin_src emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

Always compile packages, and use the newest version available.

#+begin_src emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)
#+end_src

* Set personal information
** Me
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Quinn Hart"
        user-mail-address "qjhart@ucdavis.edu"
        calendar-latitude 38.55
        calendar-longitude -121.75
        calendar-location-name "Davis, CA")
#+END_SRC

#+RESULTS:
: Davis, CA

** Access my netrc data

I store a few credentials in a =.netrc= file. This can be convenient if you want
to add connection information to your org-mode (sql database connections e.g.)
and want to use a convenient way to access your credentials.

#+begin_src emacs-lisp
  (require 'netrc)

  (setq netrc-file "~/.netrc")

  (defun netrc-username (machine)
    "Helper function to extract a username from my netrc."
    (car (netrc-credentials machine)))

  (defun netrc-password (machine)
    "Helper function to extract a password from my netrc."
    (cadr (netrc-credentials machine)))
#+end_src

#+RESULTS:
: netrc-password

* Use sensible-defaults.el

I have [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]] as a submodule in ~plugins~ for some basic
settings.

#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/plugins/sensible-defaults.el/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/use-all-keybindings)
; Double space users rule
  (setq sentence-end-double-space t)

#+END_SRC

#+RESULTS:
: t

* Shell

Make sure to include shellcheck
#+BEGIN_SRC emacs-lisp
(use-package flymake-shellcheck
  :commands flymake-shellcheck-load
  :init
  (add-hook 'sh-mode-hook 'flymake-shellcheck-load))
#+END_SRC

#+RESULTS:
| flymake-shellcheck-load | (lambda nil (setq sh-basic-offset 2 sh-indentation 2)) |

When try executing program I want to use my .bashrc PATH

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
:ensure t
:config (exec-path-from-shell-initialize))
#+END_SRC

#+RESULTS:
: t

* Custom Auto-generated customizations

Move any emacs customizations away

#+BEGIN_SRC emacs-lisp
 (setq custom-file "~/.emacs.d/custom.el")
 (load custom-file :noerror)
#+END_SRC

#+RESULTS:

* Add ~resources~ to ~load-path~


#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/resources/")
#+END_SRC

* =evil-mode=

Gjstein included a description of starting on [[http://cachestocaches.com/2016/12/vim-within-emacs-anecdotal-guide/][Evil Mode]], that made me consider
adding it as an option. Honestly though, I'm not sure I can try that for a
number of days.

Use =evil=.

#+begin_src emacs-lisp
  (use-package undo-tree)
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    :config
;;    (evil-mode 1)
  )
#+end_src


Install =evil-collection=, which provides evil-friendly bindings for many modes.

#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))
#+end_src

#+RESULTS:

Enable =surround= everywhere.

#+begin_src emacs-lisp
  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))
#+end_src

#+RESULTS:
: t

Use =evil= with Org agendas.

#+begin_src emacs-lisp
  (use-package evil-org
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda () (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

#+RESULTS:
: t

* Utility functions

Define a big ol' bunch of handy utility functions.

#+BEGIN_SRC emacs-lisp
  (defun hrs/view-buffer-name ()
    "Display the filename of the current buffer."
    (interactive)
    (message (buffer-file-name)))

  (defun hrs/generate-scratch-buffer ()
    "Create and switch to a temporary scratch buffer with a random
       name."
    (interactive)
    (switch-to-buffer (make-temp-name "scratch-")))

  (defun hrs/de-unicode ()
    "Tidy up a buffer by replacing all special Unicode characters
       (smart quotes, etc.) with their more sane cousins"
    (interactive)
    (let ((unicode-map '(("[\u2018\|\u2019\|\u201A\|\uFFFD]" . "'")
                         ("[\u201c\|\u201d\|\u201e]" . "\"")
                         ("\u2013" . "--")
                         ("\u2014" . "---")
                         ("\u2026" . "...")
                         ("\u00A9" . "(c)")
                         ("\u00AE" . "(r)")
                         ("\u2122" . "TM")
                         ("[\u02DC\|\u00A0]" . " "))))
      (save-excursion
        (loop for (key . value) in unicode-map
              do
              (goto-char (point-min))
              (replace-regexp key value)))))

  (defun hrs/beautify-json ()
    "Pretty-print the JSON in the marked region. Currently shells
       out to `jsonpp'--be sure that's installed!"
    (interactive)
    (save-excursion
      (shell-command-on-region (mark) (point) "jsonpp" (buffer-name) t)))

  (defun hrs/unfill-paragraph ()
    "Takes a multi-line paragraph and makes it into a single line of text."
    (interactive)
    (let ((fill-column (point-max)))
      (fill-paragraph nil)))

  (defun hrs/kill-current-buffer ()
    "Kill the current buffer without prompting."
    (interactive)
    (kill-buffer (current-buffer)))

  (defun hrs/visit-last-dired-file ()
    "Open the last file in an open dired buffer."
    (end-of-buffer)
    (previous-line)
    (dired-find-file))

  (defun hrs/visit-last-migration ()
    "Open the last file in 'db/migrate/'. Relies on projectile. Pretty sloppy."
    (interactive)
    (dired (expand-file-name "db/migrate" (projectile-project-root)))
    (hrs/visit-last-dired-file)
    (kill-buffer "migrate"))

  (defun hrs/add-auto-mode (mode &rest patterns)
    "Add entries to `auto-mode-alist' to use `MODE' for all given file `PATTERNS'."
    (dolist (pattern patterns)
      (add-to-list 'auto-mode-alist (cons pattern mode))))

  (defun hrs/find-file-as-sudo ()
    (interactive)
    (let ((file-name (buffer-file-name)))
      (when file-name
        (find-alternate-file (concat "/sudo::" file-name)))))

  (defun hrs/insert-random-string (len)
    "Insert a random alphanumeric string of length len."
    (interactive)
    (let ((mycharset "1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstyvwxyz"))
      (dotimes (i len)
        (insert (elt mycharset (random (length mycharset)))))))

  (defun hrs/generate-password ()
    "Insert a good alphanumeric password of length 30."
    (interactive)
    (hrs/insert-random-string 30))
#+END_SRC

* UI preferences
** Disable window chrome

I don't usually use the menu or scroll bar, and they take up useful space.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  ;; (menu-bar-mode 0)
  (when window-system
    (scroll-bar-mode -1))
#+END_SRC

#** Use fancy lambdas
#
# Why not?
#
# #+BEGIN_SRC emacs-lisp
#   (global-prettify-symbols-mode t)
# #+END_SRC

** Custom solarized-dark theme

#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
  :ensure t)
  (when window-system
    (setq solarized-use-variable-pitch nil)
    (setq solarized-height-plus-1 1.0)
    (setq solarized-height-plus-2 1.0)
    (setq solarized-height-plus-3 1.0)
    (setq solarized-height-plus-4 1.0)
    (setq solarized-high-contrast-mode-line nil)
    (load-theme 'solarized-dark t))
 #+END_SRC

 #+RESULTS:
 : t

** Use =moody= for a beautiful modeline

This gives me a truly lovely ribbon-based modeline.

#+begin_src emacs-lisp
  (use-package moody
    :config
    (setq x-underline-at-descent-line t)
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode))
#+end_src

#+RESULTS:
: t

** Use =minions= to hide all minor modes

I never want to see a minor mode, and manually adding =:diminish= to every
use-package declaration is a hassle. This uses =minions= to hide all the minor
modes in the modeline. Nice!

By default there's a =;-)= after the major mode; that's an adorable default, but
I'd rather skip it.

#+begin_src emacs-lisp
   (use-package minions
     :config
;;     (setq minions-mode-line-lighter ""
;;           minions-mode-line-delimiters '("" . ""))
     (minions-mode 1))
#+end_src

#+RESULTS:
: t

** Add the last keycast to the modeline

#+begin_src emacs-lisp
(use-package keycast
:ensure t)
#+end_src

#+RESULTS:

** Set default font and configure font resizing

I'm partial to Inconsolata.

The standard =text-scale-= functions just resize the text in the current buffer;
I'd generally like to resize the text in /every/ buffer, and I usually want to
change the size of the modeline, too (this is especially helpful when
presenting). These functions and bindings let me resize everything all together!

Note that this overrides the default font-related keybindings from
=sensible-defaults=.

#+BEGIN_SRC emacs-lisp
  (setq hrs/default-font "Inconsolata")
  (setq hrs/default-font-size 18)
  (setq hrs/current-font-size hrs/default-font-size)

  (setq hrs/font-change-increment 1.1)

  (defun hrs/set-font-size ()
    "Set the font to `hrs/default-font' at `hrs/current-font-size'."
    (set-frame-font
     (concat hrs/default-font "-" (number-to-string hrs/current-font-size))))

  (defun hrs/reset-font-size ()
    "Change font size back to `hrs/default-font-size'."
    (interactive)
    (setq hrs/current-font-size hrs/default-font-size)
    (hrs/set-font-size))

  (defun hrs/increase-font-size ()
    "Increase current font size by a factor of `hrs/font-change-increment'."
    (interactive)
    (setq hrs/current-font-size
          (ceiling (* hrs/current-font-size hrs/font-change-increment)))
    (hrs/set-font-size))

  (defun hrs/decrease-font-size ()
    "Decrease current font size by a factor of `hrs/font-change-increment', down to a minimum size of 1."
    (interactive)
    (setq hrs/current-font-size
          (max 1
               (floor (/ hrs/current-font-size hrs/font-change-increment))))
    (hrs/set-font-size))

  (define-key global-map (kbd "C-)") 'hrs/reset-font-size)
  (define-key global-map (kbd "C-+") 'hrs/increase-font-size)
  (define-key global-map (kbd "C-=") 'hrs/increase-font-size)
  (define-key global-map (kbd "C-_") 'hrs/decrease-font-size)
  (define-key global-map (kbd "C--") 'hrs/decrease-font-size)

  (hrs/reset-font-size)
#+END_SRC

** Highlight the current line

=global-hl-line-mode= softly highlights the background color of the line
containing point. It makes it a bit easier to find point, and it's useful when
pairing or presenting code.

#+BEGIN_SRC emacs-lisp
  (when window-system
    (global-hl-line-mode))
#+END_SRC

** Hide certain modes from the modeline

I'd rather have only a few necessary mode identifiers on my modeline. This
either hides or "renames" a variety of major or minor modes using the =diminish=
package.

#+BEGIN_SRC emacs-lisp
  (defmacro diminish-minor-mode (filename mode &optional abbrev)
    `(eval-after-load (symbol-name ,filename)
       '(diminish ,mode ,abbrev)))

  (defmacro diminish-major-mode (mode-hook abbrev)
    `(add-hook ,mode-hook
               (lambda () (setq mode-name ,abbrev))))

;;  (diminish-minor-mode 'abbrev 'abbrev-mode)
;;  (diminish-minor-mode 'simple 'auto-fill-function)
;;(diminish-minor-mode 'company 'company-mode)
;;  (diminish-minor-mode 'eldoc 'eldoc-mode)
;;(diminish-minor-mode 'flycheck 'flycheck-mode)
;;(diminish-minor-mode 'flyspell 'flyspell-mode)
;;  (diminish-minor-mode 'global-whitespace 'global-whitespace-mode)
;;  (diminish-minor-mode 'projectile 'projectile-mode)
;;  (diminish-minor-mode 'ruby-end 'ruby-end-mode)
;;  (diminish-minor-mode 'subword 'subword-mode)
;;  (diminish-minor-mode 'undo-tree 'undo-tree-mode)
;;  (diminish-minor-mode 'yard-mode 'yard-mode)
;; (diminish-minor-mode 'yasnippet 'yas-minor-mode)
;;  (diminish-minor-mode 'wrap-region 'wrap-region-mode)
;;  (diminish-minor-mode 'paredit 'paredit-mode " π")
;;  (diminish-major-mode 'emacs-lisp-mode-hook "el")
;;  (diminish-major-mode 'haskell-mode-hook "λ=")
;;  (diminish-major-mode 'lisp-interaction-mode-hook "λ")
;;  (diminish-major-mode 'python-mode-hook "Py")
#+END_SRC

** Highlight uncommitted changes

Use the =diff-hl= package to highlight changed-and-uncommitted lines when
programming.

#+BEGIN_SRC emacs-lisp
(use-package diff-hl
  :config
  (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
  (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
#+END_SRC
jh

* Project management

I use a few packages in virtually every programming or writing environment to
manage the project, handle auto-completion, search for terms, and deal with
version control. That's all in here.

** =ag=

Install =ag= to provide search within projects (usually through
=projectile-ag=).

#+begin_src emacs-lisp
  (use-package ag)
#+end_src

** =company=

Use =company-mode= everywhere.

#+begin_src emacs-lisp
  (use-package company)
  (add-hook 'after-init-hook 'global-company-mode)
#+end_src

Use =M-/= for completion.

#+begin_src emacs-lisp
  (global-set-key (kbd "M-/") 'company-complete-common)
#+end_src

** =flycheck=

 #+begin_src emacs-lisp
   (use-package let-alist)
   (use-package flycheck)
 #+end_src

** =magit=

I use =magit= to handle version control. It's lovely, but I tweak a few things:

- I bring up the status menu with =C-x g=.
- Use =evil= keybindings with =magit=.
- The default behavior of =magit= is to ask before pushing. I haven't had any
  problems with accidentally pushing, so I'd rather not confirm that every time.
- Per [[http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html][tpope's suggestions]], highlight commit text in the summary line that goes
  beyond 50 characters.
- On the command line I'll generally push a new branch with a plain old =git
  push=, which automatically creates a tracking branch on (usually) =origin=.
  Magit, by default, wants me to manually specify an upstream branch. This binds
  =P P= to =magit-push-implicitly=, which is just a wrapper around =git push
  -v=. Convenient!
- I'd like to start in the insert state when writing a commit message.

#+begin_src emacs-lisp
  (use-package magit
    :bind
    ("C-x g" . magit-status)

    :config
    ;; (use-package evil-magit)
    (use-package with-editor)
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50)

;;    (add-hook 'with-editor-mode-hook 'evil-insert-state))
#+end_src

I've been playing around with the newly-released =forge= for managing GitHub PRs
and issues. Seems slick so far.

#+begin_src emacs-lisp
  (use-package ghub)
  (use-package forge)
#+end_src

I'm also partial to =git-timemachine=, which lets you quickly page through the
history of a file.

#+begin_src emacs-lisp
  (use-package git-timemachine)
#+end_src

** =projectile=

Projectile's default binding of =projectile-ag= to =C-c p s s= is clunky enough
that I rarely use it (and forget it when I need it). This binds it to the
easier-to-type =C-c v= to useful searches.

Bind =C-p= to fuzzy-finding files in the current project. We also need to
explicitly set that in a few other modes.

I use =ivy= as my completion system.

When I visit a project with =projectile-switch-project=, the default action is
to search for a file in that project. I'd rather just open up the top-level
directory of the project in =dired= and find (or create) new files from there.

I'd like to /always/ be able to recursively fuzzy-search for files, not just
when I'm in a Projectile-defined project. I use the current directory as a
project root (if I'm not in a "real" project).

#+begin_src emacs-lisp
  (use-package projectile
    :bind
    ("C-c v" . projectile-ag)

    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

    (define-key evil-normal-state-map (kbd "C-p") 'projectile-find-file)
    (evil-define-key 'motion ag-mode-map (kbd "C-p") 'projectile-find-file)
    (evil-define-key 'motion rspec-mode-map (kbd "C-p") 'projectile-find-file)

    (setq projectile-completion-system 'ivy)
    (setq projectile-switch-project-action 'projectile-dired)
    (setq projectile-require-project-root nil))
#+end_src

** =restclient=

#+begin_src emacs-lisp
  (use-package restclient)
  (use-package company-restclient
    :config
    (add-to-list 'company-backends 'company-restclient))
#+end_src

** =undo-tree=

I like tree-based undo management. I only rarely need it, but when I do, oh boy.

#+begin_src emacs-lisp
  (use-package undo-tree)
#+end_src
* Programming customizations
** Use Editorconfig

#+BEGIN_SRC emacs-lisp
(use-package editorconfig
  :ensure t
  :config
  (editorconfig-mode 1))
#+END_SRC

#+RESULTS:
: t

** Docker
I am looking into using the lsb-mode package in order to continue my code
editing, in particular for bash scripting as a first test.  One way to run the
lsb-server, is to mount a docker instance, and run it whenever you are editing
your file.

#+BEGIN_SRC emacs-lisp
(use-package docker
  :ensure t
  :bind ("C-c d" . docker))
#+END_SRC

** Use Multiple Cursors

#+BEGIN_SRC emacs-lisp
	(use-package multiple-cursors
	:ensure t
	:config
	(global-set-key (kbd "C-c C-c") 'mc/edit-lines)
	(global-set-key (kbd "C-c >") 'mc/mark-next-like-this)
	(global-set-key (kbd "C-c <") 'mc/mark-previous-like-this)
	(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
	)
#+END_SRC

#+RESULTS:
: t
** Default Tab Width
I like shallow indentation, but tabs are displayed as 8 characters by default.
This reduces that.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
#+END_SRC

#+RESULTS:
: 2

** SPARQL Mode
Want to be able to use sparql in org-mode, but in sparql-files as well.

#+BEGIN_SRC emacs-lisp
  (use-package sparql-mode)
   (hrs/add-auto-mode 'sparql-mode "\\.sparql$")
   (hrs/add-auto-mode 'sparql-mode "\\.ru$")
   (hrs/add-auto-mode 'sparql-mode "\\.rq$")

#+END_SRC

#+RESULTS:

** Add N3 programming

Use n3 mode for when we are accessing n3 or owl files.

#+BEGIN_SRC emacs-lisp
  (autoload 'n3-mode "n3-mode" "Major mode for OWL or N3 files" t)
	(add-hook 'n3-mode-hook
						'turn-on-font-lock)
	(hrs/add-auto-mode 'n3-mode "\\.n3$")
	(hrs/add-auto-mode 'n3-mode "\\.owl$")
#+END_SRC

#+RESULTS:

** TTL Mode
#+BEGIN_SRC emacs-lisp
  (use-package ttl-mode)
    (hrs/add-auto-mode 'ttl-mode "\\.ttl$")
#+END_SRC

#+RESULTS:

** JSON Mode
We want a nice mode for JSON, parsing.
#+BEGIN_SRC emacs-lisp
  (use-package json-mode)
   (hrs/add-auto-mode 'json-mode "\\.json$")
#+END_SRC

#+RESULTS:

** JQ Command Line
#+BEGIN_SRC emacs-lisp
(use-package jq-mode)
(hrs/add-auto-mode `jq-mode "\\.jq$")
(with-eval-after-load "json-mode"
  (define-key json-mode-map (kbd "C-c C-j") #'jq-interactively)
)
#+END_SRC

#+RESULTS:

** YAML Mode
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode)
   (hrs/add-auto-mode 'yaml-mode "\\.yml$")
   (hrs/add-auto-mode 'yaml-mode "\\.yaml$")
#+END_SRC

** Markdown

Because I can't always use =org=.

I'd like spell-checking running when editing Markdown.

#+BEGIN_SRC emacs-lisp
  (add-hook 'gfm-mode-hook 'flyspell-mode)
#+END_SRC

Associate =.md= files with GitHub-flavored Markdown.

#+BEGIN_SRC emacs-lisp
  (hrs/add-auto-mode 'gfm-mode "\\.md$")
#+END_SRC

Use =pandoc= to render the results.

#+BEGIN_SRC emacs-lisp
  (setq markdown-command "pandoc --standalone --mathjax --from=markdown")
#+END_SRC

** CSS and Sass

Indent 2 spaces and use =rainbow-mode= to display color-related words in the
color they describe.

#+BEGIN_SRC emacs-lisp
  (add-hook 'css-mode-hook
            (lambda ()
              (rainbow-mode)
              (setq css-indent-offset 2)))

  (add-hook 'scss-mode-hook 'rainbow-mode)
#+END_SRC

Don't compile the current file every time I save.

#+BEGIN_SRC emacs-lisp
  (setq scss-compile-at-save nil)
#+END_SRC

** JavaScript and CoffeeScript

Use js2-mode for javascript.  Install =coffee-mode= from editing CoffeeScript code.

#+begin_src emacs-lisp
  (use-package js2-mode)
  (use-package coffee-mode)
#+end_src

#+RESULTS:

** =sh=

Indent with 2 spaces.

#+BEGIN_SRC emacs-lisp
  (add-hook 'sh-mode-hook
            (lambda ()
              (setq sh-basic-offset 2
                    sh-indentation 2)))
#+END_SRC

** =web-mode=

If I'm in =web-mode=, I'd like to:

- Color color-related words with =rainbow-mode=.
- Still be able to run RSpec tests from =web-mode= buffers.
- Indent everything with 2 spaces.

#+BEGIN_SRC emacs-lisp
  (add-hook 'web-mode-hook
            (lambda ()
              (rainbow-mode)
              (rspec-mode)
              (setq web-mode-markup-indent-offset 2)))
#+END_SRC

Use =web-mode= with embedded Ruby files, regular HTML, and PHP.

#+BEGIN_SRC emacs-lisp
  (hrs/add-auto-mode
   'web-mode
   "\\.erb$"
   "\\.html$"
   "\\.php$"
   "\\.rhtml$")
#+END_SRC


** TWIG Mode

If I ever am programming php TWIGS

#+BEGIN_SRC emacs-lisp
(use-package twig-mode)
#+END_SRC

* Terminal

I use =multi-term= to manage my shell sessions.

Use a login shell:

#+BEGIN_SRC emacs-lisp
  (setq multi-term-program-switches "--login")
#+END_SRC

I'd rather not use Evil in the terminal. It's not especially useful (I don't use
vi bindings in xterm) and it shadows useful keybindings (=C-d= for EOF, for
example).

#+BEGIN_SRC emacs-lisp
;;;  (evil-set-initial-state 'term-mode 'emacs)
#+END_SRC

I add a bunch of hooks to =term-mode=:

- I'd like links (URLs, etc) to be clickable.
- Yanking in =term-mode= doesn't quite work. The text from the paste appears in
  the buffer but isn't sent to the shell process. This correctly binds =C-y= and
  middle-click to yank the way we'd expect.
- I bind =M-o= to quickly change windows. I'd like that in terminals, too.
- I don't want to perform =yasnippet= expansion when tab-completing.

#+BEGIN_SRC emacs-lisp
  (defun hrs/term-paste (&optional string)
    (interactive)
    (process-send-string
     (get-buffer-process (current-buffer))
     (if string string (current-kill 0))))

  (add-hook 'term-mode-hook
            (lambda ()
              (goto-address-mode)
              (define-key term-raw-map (kbd "C-y") 'hrs/term-paste)
              (define-key term-raw-map (kbd "<mouse-2>") 'hrs/term-paste)
              (define-key term-raw-map (kbd "M-o") 'other-window)
              (setq yas-dont-activate t)))
#+END_SRC

* Editing settings
** Configure =ivy= and =counsel=

Try =ivy= and =counsel= as my completion framework.

This configuration:

- Uses =counsel-M-x= for command completion,
- Replaces =isearch= with =swiper=,
- Uses =smex= to maintain history,
- Enables fuzzy matching everywhere except swiper (where it's thoroughly
  unhelpful), and
- Includes recent files in the switch buffer.

Note, [[https://sam217pa.github.io/2016/09/13/from-helm-to-ivy/][Move to Ivy]] has some discussion

#+begin_src emacs-lisp
  (use-package counsel
    :bind
    ("M-x" . 'counsel-M-x)
    ("C-s" . 'swiper)

    :config
    (use-package flx)
    (use-package smex)

    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-re-builders-alist
          '((swiper . ivy--regex-plus)
            (t . ivy--regex-fuzzy))))
    ; C-j terminates, RET continues in directory
    (define-key ivy-minibuffer-map (kbd "C-j") #'ivy-immediate-done)
    (define-key ivy-minibuffer-map (kbd "RET") #'ivy-alt-done)
#+end_src

#+RESULTS:
: ivy-alt-done

** Always kill current buffer

Assume that I always want to kill the current buffer when hitting =C-x k=.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x k") 'hrs/kill-current-buffer)
#+END_SRC

#+RESULTS:
: hrs/kill-current-buffer

** Use =company-mode= everywhere

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

#+RESULTS:
| package--save-selected-packages | global-company-mode | debian-ispell-set-default-dictionary | debian-ispell-set-startup-menu | x-wm-set-size-hint |

** Configure =yasnippet=

I /don’t/ want =yas= to automatically indent the snippets it inserts. Sometimes
this looks pretty bad (when indenting org-mode, for example, or trying to guess
at the correct indentation for Python).

#+begin_src emacs-lisp
      (use-package yasnippet-snippets
      :ensure t)
            (use-package yasnippet
              :ensure t
              :config (yas-global-mode 1)
                      (setq yas-indent-line `auto))

#+end_src

#+RESULTS:
: t

** Quelpa

#+begin_src emacs-lisp
  (use-package quelpa)
#+end_src

*** Sketch Mode

#+begin_src emacs-lisp
;;(quelpa '(sketch-mode :repo "dalanicolai/sketch-mode" :fetcher github))
;;(use-package sketch-mode
;;  :defer t)
#+end_src

#+RESULTS:


** Indent-Tools

#+BEGIN_SRC emacs-lisp
(use-package indent-tools)
(global-set-key (kbd "C-c >") 'indent-tools-hydra/body)
(add-hook 'yaml-mode-hook
 (lambda () (define-key python-mode-map (kbd "C-c >") 'indent-tools-hydra/body))
)

#+END_SRC

** Wrap paragraphs automatically

=AutoFillMode= automatically wraps paragraphs, kinda like hitting =M-q=. I wrap
a lot of paragraphs, so this automatically wraps 'em when I'm writing text,
Markdown, or Org.

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'gfm-mode-hook 'turn-on-auto-fill)
  (add-hook 'org-mode-hook 'turn-on-auto-fill)
#+END_SRC

Sometimes, though, I don't wanna wrap text. This toggles wrapping with =C-c q=:

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c q") 'auto-fill-mode)
#+END_SRC

** Linting prose

HRS has defined [[http://proselint.com/][proselint]] to check for common errors. This creates a flycheck
checker that runs proselint in texty buffers and displays errors.

#+begin_src emacs-lisp
  (use-package flycheck)

  (flycheck-define-checker proselint
    "A linter for prose."
    :command ("proselint" source-inplace)
    :error-patterns
    ((warning line-start (file-name) ":" line ":" column ": "
              (id (one-or-more (not (any " "))))
              (message (one-or-more not-newline)
                       (zero-or-more "\n" (any " ") (one-or-more not-newline)))
              line-end))
    :modes (text-mode markdown-mode gfm-mode org-mode))

  (add-to-list 'flycheck-checkers 'proselint)
#+end_src

Use flycheck in the appropriate buffers:

#+begin_src emacs-lisp
  (add-hook 'markdown-mode-hook #'flycheck-mode)
  (add-hook 'gfm-mode-hook #'flycheck-mode)
  (add-hook 'text-mode-hook #'flycheck-mode)
  (add-hook 'org-mode-hook #'flycheck-mode)
#+end_src

** Use Switch Window

#+BEGIN_SRC emacs-lisp
  (use-package switch-window)
  (global-set-key (kbd "C-x o") 'switch-window)
#+END_SRC

#+RESULTS:
: switch-window

** Switch windows when splitting

When splitting a window, I invariably want to switch to the new window. This
makes that automatic.

#+BEGIN_SRC emacs-lisp
  (defun hrs/split-window-below-and-switch ()
    "Split the window horizontally, then switch to the new pane."
    (interactive)
    (split-window-below)
    (other-window 1))

  (defun hrs/split-window-right-and-switch ()
    "Split the window vertically, then switch to the new pane."
    (interactive)
    (split-window-right)
    (other-window 1))

  (global-set-key (kbd "C-x 2") 'hrs/split-window-below-and-switch)
  (global-set-key (kbd "C-x 3") 'hrs/split-window-right-and-switch)
#+END_SRC

#+RESULTS:
: hrs/split-window-right-and-switch

** Use projectile everywhere

#+BEGIN_SRC emacs-lisp
  (projectile-global-mode)
#+END_SRC

** Add a bunch of engines for =engine-mode=

Enable [[https://github.com/hrs/engine-mode][engine-mode]] and define a few useful engines.

* Publishing and task management with Org-mode

#+begin_src emacs-lisp
  (use-package org
    :ensure org-plus-contrib)
#+end_src

I'd like the initial scratch buffer to be in Org:

#+begin_src emacs-lisp
  (setq initial-major-mode 'org-mode)
#+end_src

** Display preferences

I like to see an outline of pretty bullets instead of a list of asterisks.

#+begin_src emacs-lisp
  (use-package org-bullets
    :init
    (add-hook 'org-mode-hook 'org-bullets-mode))
#+end_src

I like seeing a little downward-pointing arrow instead of the usual ellipsis
(=...=) that org displays when there's stuff under a header.

#+begin_src emacs-lisp
  (setq org-ellipsis "⤵")
#+end_src

Use syntax highlighting in source blocks while editing.

#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
#+end_src

Make TAB act as if it were issued in a buffer of the language's major mode.

#+begin_src emacs-lisp
  (setq org-src-tab-acts-natively t)
#+end_src

When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).

#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src

** babel

Allow =babel= to evaluate Emacs lisp, Ruby, dot, or Gnuplot code.

#+begin_src emacs-lisp
  (use-package gnuplot)
  (use-package ob-http)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (sql . t)
     (shell . t)
     (ruby . t)
     (dot . t)
     (jq  . t)
     (sparql . t)
     (http . t)
     (plantuml . t)
     (js . t)
     (gnuplot . t)))

  (setq org-plantuml-jar-path
        (expand-file-name "/usr/share/plantuml/plantuml.jar"))
#+end_src

#+RESULTS:
: /usr/share/plantuml/plantuml.jar

Don't ask before evaluating code blocks.

#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

Use =htmlize= to ensure that exported code blocks use syntax highlighting.

#+begin_src emacs-lisp
  (use-package htmlize)
#+end_src

Associate the "dot" language with the =graphviz-dot= major mode.

#+begin_src emacs-lisp
  (use-package graphviz-dot-mode)
  (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))
#+end_src

Translate regular ol' straight quotes to typographically-correct curly quotes
when exporting.

#+begin_src emacs-lisp
  (setq org-export-with-smart-quotes t)
#+end_src

** Org-Roam

#+begin_src emacs-lisp
(use-package org-roam
:ensure t
:init
(setq org-roam-v2-ack t)
:custom
(org-roam-directory "~/org-roam")
:bind (("C-c n l" . org-roam-buffer-toggle)
("C-c n f" . org-roam-node-find)
("C-c n i" . org-roam-node-insert))
:config
(org-roam-setup))
#+end_src

#+RESULTS:
: org-roam-node-insert

* =dired=

Load up the assorted =dired= extensions.

#+BEGIN_SRC emacs-lisp
;;  (require 'dired-x)
;;  (require 'dired+)
;;  (require 'dired-open)
#+END_SRC

Open media with the appropriate programs.

#+BEGIN_SRC emacs-lisp
  (setq dired-open-extensions
        '(("pdf" . "evince")
          ("mkv" . "vlc")
          ("mp4" . "vlc")
          ("avi" . "vlc")))
#+END_SRC

These are the switches that get passed to =ls= when =dired= gets a list of
files. We're using:

- =l=: Use the long listing format.
- =h=: Use human-readable sizes.
- =v=: Sort numbers naturally.
- =A=: Almost all. Doesn't include "=.=" or "=..=".

#+BEGIN_SRC emacs-lisp
  (setq-default dired-listing-switches "-lhvA")
#+END_SRC

Kill buffers of files/directories that are deleted in =dired=.

#+BEGIN_SRC emacs-lisp
  (setq dired-clean-up-buffers-too t)
#+END_SRC

Always copy directories recursively instead of asking every time.

#+BEGIN_SRC emacs-lisp
  (setq dired-recursive-copies 'always)
#+END_SRC

Ask before recursively /deleting/ a directory, though.

#+BEGIN_SRC emacs-lisp
  (setq dired-recursive-deletes 'top)
#+END_SRC

* Set custom keybindings

Just a few handy functions.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-w") 'backward-kill-word)
  (global-set-key (kbd "M-/") 'hippie-expand)
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key (kbd "M-#") 'sort-lines)
  (global-set-key (kbd "C-c s") 'multi-term)
  (global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

Remap when working in terminal Emacs.

#+BEGIN_SRC emacs-lisp
  (define-key input-decode-map "\e[1;2A" [S-up])
#+END_SRC
